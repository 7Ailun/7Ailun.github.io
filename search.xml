<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础</title>
      <link href="/2022/12/04/java/"/>
      <url>/2022/12/04/java/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p><p>位运算符作用在所有的位上，并且按位运算。假设a &#x3D; 60，b &#x3D; 13;它们的二进制格式表示将如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = 0011 1100</span><br><span class="line">B = 0000 1101</span><br><span class="line">-----------------</span><br><span class="line">A&amp;B = 0000 1100</span><br><span class="line">A | B = 0011 1101</span><br><span class="line">A ^ B = 0011 0001</span><br><span class="line">~A= 1100 0011</span><br></pre></td></tr></table></figure><p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p><table><thead><tr><th align="left">操作符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">＆</td><td align="left">如果相对应位都是1，则结果为1，否则为0</td><td align="left">（A＆B），得到12，即0000 1100</td></tr><tr><td align="left">|</td><td align="left">如果相对应位都是 0，则结果为 0，否则为 1</td><td align="left">（A | B）得到61，即 0011 1101</td></tr><tr><td align="left">^</td><td align="left">如果相对应位值相同，则结果为0，否则为1</td><td align="left">（A ^ B）得到49，即 0011 0001</td></tr><tr><td align="left">〜</td><td align="left">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td><td align="left">（〜A）得到-61，即1100 0011</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td align="left">A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td align="left">A &gt;&gt; 2得到15即 1111</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td align="left">A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p><p>Test.java 文件代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">     int a = 60; /* 60 = 0011 1100 */ </span><br><span class="line">     int b = 13; /* 13 = 0000 1101 */</span><br><span class="line">     int c = 0;</span><br><span class="line">     c = a &amp; b;       /* 12 = 0000 1100 */</span><br><span class="line">     System.out.println(&quot;a &amp; b = &quot; + c );</span><br><span class="line"> </span><br><span class="line">     c = a | b;       /* 61 = 0011 1101 */</span><br><span class="line">     System.out.println(&quot;a | b = &quot; + c );</span><br><span class="line"> </span><br><span class="line">     c = a ^ b;       /* 49 = 0011 0001 */</span><br><span class="line">     System.out.println(&quot;a ^ b = &quot; + c );</span><br><span class="line"> </span><br><span class="line">     c = ~a;          /*-61 = 1100 0011 */</span><br><span class="line">     System.out.println(&quot;~a = &quot; + c );</span><br><span class="line"> </span><br><span class="line">     c = a &lt;&lt; 2;     /* 240 = 1111 0000 */</span><br><span class="line">     System.out.println(&quot;a &lt;&lt; 2 = &quot; + c );</span><br><span class="line"> </span><br><span class="line">     c = a &gt;&gt; 2;     /* 15 = 1111 */</span><br><span class="line">     System.out.println(&quot;a &gt;&gt; 2  = &quot; + c );</span><br><span class="line">  </span><br><span class="line">     c = a &gt;&gt;&gt; 2;     /* 15 = 0000 1111 */</span><br><span class="line">     System.out.println(&quot;a &gt;&gt;&gt; 2 = &quot; + c );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例编译运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a &amp; b = 12</span><br><span class="line">a | b = 61</span><br><span class="line">a ^ b = 49</span><br><span class="line">~a = -61</span><br><span class="line">a &lt;&lt; 2 = 240</span><br><span class="line">a &gt;&gt; 2  = 15</span><br><span class="line">a &gt;&gt;&gt; 2 = 15</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="什么是多态，多态具体体现有哪些？"><a href="#什么是多态，多态具体体现有哪些？" class="headerlink" title="什么是多态，多态具体体现有哪些？"></a>什么是多态，多态具体体现有哪些？</h3><h4 id="多态：方法或对象具有多种形态，是OOP的第三大特征，是建立在封装和继承基础之上"><a href="#多态：方法或对象具有多种形态，是OOP的第三大特征，是建立在封装和继承基础之上" class="headerlink" title="多态：方法或对象具有多种形态，是OOP的第三大特征，是建立在封装和继承基础之上"></a><strong>多态：方法或对象具有多种形态，是OOP的第三大特征，是建立在封装和继承基础之上</strong></h4><h4 id="多态具体体现："><a href="#多态具体体现：" class="headerlink" title="多态具体体现："></a>多态具体体现：</h4><ol><li><strong>方法多态</strong><ol><li><strong>重载体现多态</strong></li><li><strong>重写体现多态</strong></li></ol></li><li><strong>对象多态</strong><ol><li><strong>对象的编译类型和运行类型可以不一致，编译类型在定义时，就确定，不能变化</strong></li><li><strong>对象的运行类型是可以变化的，可以通过getClass（）来查看运行类型</strong></li><li><strong>编译类型看 &#x3D; 号的左边，运行类型看 &#x3D; 号右边</strong></li></ol></li></ol><h3 id="向上转型调用方法的规则如下："><a href="#向上转型调用方法的规则如下：" class="headerlink" title="向上转型调用方法的规则如下："></a>向上转型调用方法的规则如下：</h3><p><strong>（1）可以调用父类中的所有成员（需遵守访问权限）</strong></p><p><strong>（2）但是不能调用子类的特有的成员</strong></p><p><strong>（3）因为在编译阶段，能调用那些成员，是由编译类型决定的</strong></p><p><strong>（4）最终运行效果看子类（运行类型）的具体实现，即调用方法时，按照从子类（运行类型）开始查找方法</strong></p><h3 id="多态向下转型"><a href="#多态向下转型" class="headerlink" title="多态向下转型"></a>多态向下转型</h3><p><strong>（1）语法：子类类型   引用名&#x3D;（子类类型）父类引用；</strong></p><p><strong>（2）只能强转父类的引用，不能强转父类的对象</strong></p><p><strong>（3）要求父类的引用必须只想的是当前目标类型的对象</strong></p><p><strong>（4）向下转型后，可以调用子类类型中所有的成员</strong></p><p><img src="C:\Users\99301\AppData\Roaming\Typora\typora-user-images\image-20221101212452407.png" alt="image-20221101212452407"></p><h3 id="多态注意事项和细节讨论"><a href="#多态注意事项和细节讨论" class="headerlink" title="多态注意事项和细节讨论"></a>多态注意事项和细节讨论</h3><p>属性没有重写之说！属性的值看编译类型</p><p>instanceOf比较操作符，用于判断<strong>对象的运行类型</strong>是否为XX类型或XX类型的子类型</p><h2 id="x3D-x3D-和equals的区别"><a href="#x3D-x3D-和equals的区别" class="headerlink" title="&#x3D;&#x3D;和equals的区别"></a>&#x3D;&#x3D;和equals的区别</h2><p><img src="C:\Users\99301\AppData\Roaming\Typora\typora-user-images\image-20221101212801283.png" alt="image-20221101212801283"></p><h2 id="Java的动态绑定机制（巨重要）"><a href="#Java的动态绑定机制（巨重要）" class="headerlink" title="Java的动态绑定机制（巨重要）"></a>Java的动态绑定机制（巨重要）</h2><ol><li>1.当调用对象方法的时候，该对象会和该对象的<strong>内存地址&#x2F;运行类型</strong>绑定</li></ol><p>2.当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用</p><h2 id="hashCode方法"><a href="#hashCode方法" class="headerlink" title="hashCode方法"></a>hashCode方法</h2><ol><li><p>1.提高具有哈希结构的容器的效率！</p></li><li><p>2.两个引用，如果指向的是同一个对象，则哈希值肯定是一样的！</p></li><li><p>3.两个引用，如果指向的是不同对象，则哈希值是不一样的</p></li><li><p>4.哈希值主要根据地址号来的！，不能完全将哈希值等价于地址。</p></li></ol><h2 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h2><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><p>默认返回：全类名+@哈希值的十六进制，【查看Object 的 toString方法】子类往往重写toString方法，用于返回对象的属性信息</p><p>重写toString方法，打印对象或拼接对象时，都会自动调用该对象的toString形式</p><p>当直接输出一个对象是，toString方法会被默认的调用</p><h2 id="finalize方法"><a href="#finalize方法" class="headerlink" title="finalize方法"></a>finalize方法</h2><p>已废弃</p><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><ul><li><strong>断掉调试的快捷键：</strong></li></ul><p><strong>F7（跳入） F8（跳过） shift + F8（跳出） F9（resume，执行到下一个断点）</strong></p><p><strong>F7：跳入方法内</strong></p><p><strong>F8：逐行执行代码</strong></p><p> <strong>shift + F8：跳出方法</strong></p><h2 id="理解main方法语法"><a href="#理解main方法语法" class="headerlink" title="理解main方法语法"></a>理解main方法语法</h2><p>解释main方法的形式：public static void main（String[] args）{}</p><ol><li><p><strong>main方法是虚拟机调用</strong></p></li><li><p><strong>java虚拟机需要调用类的main()方法，所以方法的访问权限必须是public</strong></p></li><li><p><strong>java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static</strong></p></li><li><p><strong>该方法接收String 类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数</strong></p></li><li><p><strong>java 执行的程序 参数1 参数2 参数3 ……..</strong></p></li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ol><li><p><strong>static代码块也叫静态代码块，作用就是对类进行初始化，而且它随着类的加载而执行，并且指挥执行一次。如果是普通代码块，每创建一个对象，就执行。</strong></p></li><li><p><strong>类什么时候被加载</strong></p><p><strong>1.创建对象实例时(new)</strong></p><p><strong>2.创建子类对象实例，父类也会被加载</strong></p><p><strong>3.使用类的静态成员时(静态属性，静态方法)</strong></p></li><li><p><strong>普通的代码块，在创建对象实例时，会被隐式的调用。</strong></p><p><strong>被创建一次，就会调用一次。</strong></p><p><strong>如果只是使用类的静态成员时，普通代码快不会执行。</strong></p></li></ol><p><strong>小结</strong></p><ol><li>static代码块时类加载时，执行，只会执行一次</li><li>普通代码快时在创建对象时调用的，创建一次，调用一次</li><li>类加载的3钟情况，需要记住</li></ol><p><strong>创建一个对象时，在一个类 调用的顺序是：(重点、难点)</strong></p><ol><li>调用静态代码块和静态属性初始化(注意：静态代码块和静态属性初始化调用的优先级一样，如果有多个静态代码块和多个静态变量初始化，则按他们定义的顺序调用)</li><li>调用普通代码块和普通属性的初始化(注意：普通代码和普通属性初始化调用的优先级一样，如果多个普通代码块和多个普通属性初始化，则按定义顺序调用)</li><li>调用构造方法</li></ol><p><strong>Title:</strong></p><p><strong>构造器的最前面其实隐含了 super()和调用普通代码块，新写一个类演示（截图+说明）静态相关的代码块，属性初始化，在类加载时，就执行完毕，因此时优先于构造器和普通代码块执行的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//这里有隐藏的执行要求</span></span><br><span class="line"><span class="comment">//（1）super();</span></span><br><span class="line"><span class="comment">//（2）调用普通代码块</span></span><br><span class="line">System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h2><p><strong>final 可以修饰类、属性、方法和局部变量</strong></p><p><strong>在某些情况下程序员可能有以下需求，就会用到final</strong></p><ol><li>当不希望被继承时，可以用final修饰</li><li>党部希望父类的某个方法被子类覆盖&#x2F;重写（override），可以用final关键字</li><li>当不希望类的某个属性的值被修改，可以用final修饰</li><li>当不希望某个局部变量被修改，可以使用final修饰</li></ol><p><strong>final使用注意事项和细节</strong></p><ol><li>final修饰的属性又叫常量，一般用XX_XX_XX离开命名</li><li>final修饰的属性在定义时，必须赋初值，并且以后不能再修改，赋值可以在如下位置之一【选择一个位置赋值即可】</li></ol><p>​①定义时：如public final double TAX_RATE &#x3D; 0.08；</p><p>​②在构造器中</p><p>​③在代码块中</p><p>​3.如果final修饰的属性时静态的，则初始化的位置只能是①定义时，②在静态代码块，不能在构造器中赋值。</p><p>​4.final类不能继承，但是可以实例化对象。</p><p>​5.如果不是final类，但是含有final方法，则该方法虽然不能重写，但是可以被继承。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="抽象类的介绍"><a href="#抽象类的介绍" class="headerlink" title="抽象类的介绍"></a>抽象类的介绍</h3><ol><li><p>用abstract 关键字来修饰一个类时，这个类就是抽象类</p><p>访问修饰符 abstract 类名{}</p></li><li><p>用abstract 关键字来修饰一个方法时，这个方法是抽象方法</p><p><strong>访问修饰符 abstract 返回类型 方法名（参数列表）；&#x2F;&#x2F;没有方法体</strong></p></li><li><p>抽象类的价值更多作用是在于设计，时设计者设计号后，让子类继承并实现抽象类（）</p></li><li><p>抽象类，时考官比较爱问的知识点，在框架和设计模式使用较多</p></li></ol><h3 id="抽象类使用细节和注意事项"><a href="#抽象类使用细节和注意事项" class="headerlink" title="抽象类使用细节和注意事项"></a>抽象类使用细节和注意事项</h3><ol><li>抽象类不能被实例化</li><li>抽象类不一定要包含abstract方法。也就是说，抽象类可以没有abstract方法</li><li>一旦类包含了abstract方法，则这个类必须声明为abstract</li><li>abstract只能修饰类和方法，不能修饰属性和其他的。</li><li>抽象类可以有任意成员【引文抽象类还是类】，比如：非抽象方法、构造器、静态属性等</li><li>抽象方法不能有主题，即不能实现 abstract void aaa（）{ }；</li><li>如果一个类继承了抽象类，则他必须实现抽象类的所有抽象方法，排除它自己也声明为abstract类</li></ol><h2 id="static和abstract为何不能同时出现"><a href="#static和abstract为何不能同时出现" class="headerlink" title="static和abstract为何不能同时出现"></a>static和abstract为何不能同时出现</h2><p>当我们试图使用abstract和static同时修饰一个方法时会发现编译器报错，原因在哪里呢？</p><pre><code>  因为static修饰的方法是静态方法，其可以直接被类所调用。而abstract修饰的方法为抽象方法，即无方法体的方法，不能够被直接调用，需要在子类或实现类中去编写完整的方法处理逻辑后才能使用。</code></pre><h2 id="模板设计模式"><a href="#模板设计模式" class="headerlink" title="模板设计模式"></a>模板设计模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">概念：</span><br></pre></td></tr></table></figure><blockquote><p>固定的流程已经写好了，变化的流程定义成了抽象方法，被子类重写。<br>模板设计就是一种编码风格，把抽象类看作是一个模板，模板中不能决定的东西定义成抽象方法，让使用模板的去重写抽象方法实现需求<br>简单来说：模板设计就是提前搭建好了一些<a href="https://so.csdn.net/so/search?q=%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020">框架</a>，但是更细节的东西需要实现类再去实现</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设计模式：</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://so.csdn.net/so/search?q=%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F&spm=1001.2101.3001.7020">设计模式</a>（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。<br>使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模板设计模式：</span><br></pre></td></tr></table></figure><blockquote><p>把抽象类整体就可以看做成一个模板，模板中不能决定的东西定义成抽象方法，让使用模板的类（继承抽象类的类）去重写抽象方法实现需求，模板已经定义了通用结构，使用者只需要关心自己需要实现的功能即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模板设计模式的优势：</span><br></pre></td></tr></table></figure><blockquote><p>1.只需要关注不同的流程，相同交给父类(模板类)去做。</p><p>2.解耦：各司其职，一个类只关注自己的事情</p><ul><li>模块化：是解耦这种思维的实现方法方式。</li><li>getter&#x2F;setter就是模块化</li></ul></blockquote><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>基本介绍</li></ul><p>接口就是给出一些没有实现的方法，封装到一起，到某个类要使用的时候，再根据具体情况把这些方法写出来。语法：</p><p>interface 接口名{</p><p>&#x2F;&#x2F;属性</p><p>&#x2F;&#x2F;方法（1.抽象方法 2.默认实现方法 3.静态方法）</p><p>}</p><ul><li>class 类名 implements 接口{</li></ul><p>自己属性；</p><p>自己方法；</p><p>必须实现的接口的抽象方法</p><p>}</p><p>小结：</p><ol><li>在jdk7.0前 接口里的所有方法都没有方法体，即都是抽象方法。</li><li>jdk8.0后接口可以有静态方法，默认方法，也就是说接口中可以有方法的具体实现</li></ol><ul><li><p>注意事项和细节</p><p>1.接口不能被实例化</p><p>2.接口中所有的方法时 public方法，接口中抽象方法，可以不用abstract修饰 图示：</p><p>void aaa();</p><p>实际上是： abstract void aaa();</p><p>3.一个普通类实现接口，就必须将改接口的所有方法都实现。</p><p>4.抽象类实现接口，可以不用实现接口的方法。</p></li></ul><p>​5.一个类同时可以实现多个接口</p><p>​6.接口中的属性，只能是final的，而且是 public static final 修饰符。</p><p>​比如：int a &#x3D; 1；实际上是public static final int a &#x3D; 1;(必须初始化)</p><p>​7.接口中的属性的访问形式：接口名.属性名</p><p>​8.接口不能继承其他的类，但是可以继承多个和别的接口</p><p>interface A extends B，C{}</p><p>​9.接口的修饰符只能是 public 和 默认，这点和类的修饰符是一样的。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="自定义枚举类"><a href="#自定义枚举类" class="headerlink" title="自定义枚举类"></a>自定义枚举类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tataki.main01.Enumeration;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 艾伦</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enumeration01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//使用</span></span><br><span class="line">        System.out.println(Season.spring);</span><br><span class="line">        System.out.println(Season.summer);</span><br><span class="line">        System.out.println(Season.autumn);</span><br><span class="line">        System.out.println(Season.winter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span>&#123;</span><br><span class="line">    <span class="comment">//1.构造器私有</span></span><br><span class="line">    <span class="comment">//2.在本类创建一组对象</span></span><br><span class="line">    <span class="comment">//3.对外暴露对象（通过加public static final修饰）</span></span><br><span class="line">    <span class="comment">//4.可以提供get方法，但是不能提供set</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="comment">//public static final String num = &quot;19999&quot;; // 不会导致类加载</span></span><br><span class="line">    <span class="comment">//下面的还是会导致类加载，因为数据类型是Season，并不是普通数据类型比如：String int..</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">spring</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;温暖&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">winter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;东天&quot;</span>,<span class="string">&quot;寒冷&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">summer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;炎热&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">autumn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;凉爽&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我又来了喔&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*此处小结</span></span><br><span class="line"><span class="comment">1.static final只有修饰基本数据，才不会造成类加载，其他Interger、对象或者方法还是会加载</span></span><br><span class="line"><span class="comment">2.final修饰对象（引用）只是保证指向不变，但不能保证对象本身b</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\99301\AppData\Roaming\Typora\typora-user-images\image-20221111211238533.png" alt="image-20221111211238533"></p><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h4 id="Map中的keySet方法-返回将key值以set集合的方式返回"><a href="#Map中的keySet方法-返回将key值以set集合的方式返回" class="headerlink" title="Map中的keySet方法-返回将key值以set集合的方式返回"></a>Map中的keySet方法-返回将key值以set集合的方式返回</h4><p>1.Set 是java中一个存储不重复元素，且无序的集合类。<br>Map.keyset()，表示将map对象的所有key值已set集合的形式返回，因为map也是无序的，且key值也是不可重复的，因此这里用set集合存储key并返回也符合规则。</p><p>2.将Map中所有的键存入到set集合中。因为set具备迭代器。所有可以迭代方式取出所有的键，再根据get方法。获取每一个键对应的值。 keySet():迭代后只能通过get()取key。</p><h4 id="Map中的values方法-获取Map集合中的所有键值对象"><a href="#Map中的values方法-获取Map集合中的所有键值对象" class="headerlink" title="Map中的values方法-获取Map集合中的所有键值对象"></a>Map中的values方法-获取Map集合中的所有键值对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">示例  本示例创建一个Map集合对象并添加一些内容，然后调用values方法获取包含所有键值的集合对象，并输出这些键值信息。</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();      <span class="comment">//定义Map集合对象</span></span><br><span class="line">    map.put(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;新鲜的苹果&quot;</span>);     <span class="comment">//向集合中添加对象</span></span><br><span class="line">    map.put(<span class="string">&quot;computer&quot;</span>, <span class="string">&quot;配置优良的计算机&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;book&quot;</span>, <span class="string">&quot;堆积成山的图书&quot;</span>);</span><br><span class="line">    <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();    <span class="comment">//获取Map集合的value集合</span></span><br><span class="line">    <span class="keyword">for</span> (Object object : values) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键值：&quot;</span> + object.toString()); <span class="comment">//输出键值对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Map中entrySet-方法-获取到Map集合中所有的键值对对象的集合-Set集合"><a href="#Map中entrySet-方法-获取到Map集合中所有的键值对对象的集合-Set集合" class="headerlink" title="Map中entrySet()方法-获取到Map集合中所有的键值对对象的集合(Set集合)"></a>Map中entrySet()方法-获取到Map集合中所有的键值对对象的集合(Set集合)</h4><p>就是返回一个集合，集合里存放的是对象，创建对象的类有两个属性，分别是 键和值 也即<strong>键值对</strong>。<br>其中Entry是属于Map的静态内部类，在创建Map对象的时候就会同时创建一个Entry对象，用来记录键与值的映射关系。</p><p><img src="https://img-blog.csdnimg.cn/20200324133421256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzY4OTE2MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">]()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapBlogTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建HashMap对象</span></span><br><span class="line">        HashMap&lt;String, String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;键1&quot;</span>, <span class="string">&quot;值1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;键2&quot;</span>, <span class="string">&quot;值2&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;键3&quot;</span>, <span class="string">&quot;值3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取对象的集合</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entries=map.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用增强for遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; s : entries) &#123;</span><br><span class="line">            <span class="comment">//①可以直接输出 s 得到键值对</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//②也可以使用Entry类的方法 单独取出 键和值</span></span><br><span class="line">            String key=s.getKey();        <span class="comment">//获取键</span></span><br><span class="line">            String value=s.getValue();    <span class="comment">//获取值</span></span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);    <span class="comment">//输出键值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用while用集合中的迭代器遍历</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it=entries.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, String&gt; next=it.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line"></span><br><span class="line">            String key=next.getKey();        <span class="comment">//获取键</span></span><br><span class="line">            String value=next.getValue();    <span class="comment">//获取值</span></span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + value);    <span class="comment">//输出键值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/04/hello-world/"/>
      <url>/2022/12/04/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
